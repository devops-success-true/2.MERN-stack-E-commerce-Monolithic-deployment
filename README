# MERN Stack E-commerce ‚Äì Monolithic Deployment (VM + Nginx + Mongo Atlas)

This repository demonstrates the deployment of a **MERN stack e-commerce application** in a **monolithic architecture** on a Linux VM.  
The app is served through **Nginx** as a reverse proxy, with **frontend (React build)** and **backend (Node.js/Express API)** running on the same VM, while **MongoDB Atlas** is used as the database.  

This project is part of a **DevOps showcase** where base application code from [1.MERN-stack-E-commerce-basecode-for-labs](https://github.com/devops-success-true/1.MERN-stack-E-commerce-basecode-for-labs.git) is taken and deployed to demonstrate **environment setup, reverse proxying, build automation, and environment configuration**.

---

## üìå Architecture Overview
- **Frontend (React)** ‚Üí Built and served as static files by **Nginx**.  
- **Backend (Node.js/Express)** ‚Üí Running locally on port `8000`, proxied by **Nginx** at `/api/`.  
- **Database (MongoDB Atlas)** ‚Üí External managed DB connection.  
- **Nginx** ‚Üí Handles:
  - Serving the React SPA build (`/var/www/mern/build`)
  - Proxying `/api/` requests to Node backend
  - Logs for observability  

---

## ‚öôÔ∏è Deployment Steps

### 1. Clone the Base Code
```bash
git clone https://github.com/devops-success-true/1.MERN-stack-E-commerce-basecode-for-labs.git
cd mern-ecommerce
```

---

### 2. Install Node.js via NVM
We use **NVM (Node Version Manager)** to manage Node.js versions.  
This ensures reproducibility of runtime across environments.

```bash
curl -o- https://raw.githubusercontent.com/nvm-sh/nvm/v0.39.5/install.sh | bash
source ~/.bashrc
nvm install 21.1.0
nvm use 21.1.0
```

---

### 3. Setup Frontend
Install dependencies and build React app.

```bash
cd frontend
npm install --legacy-peer-deps
```

The flag `--legacy-peer-deps` bypasses strict peer dependency checks.  
This is required because many React projects have peer-dependency version conflicts.

#### Configure Environment
```bash
sudo mv .example.dev .env
```

Edit `.env`:
```env
REACT_APP_BASE_URL="http://192.168.1.xx/api"
```

- **`REACT_APP_BASE_URL`** ‚Üí tells React app where the backend API is located.  
  - In this VM deployment: it points to `http://VM_IP/api`, served by **Nginx reverse proxy**.  
  - Without Nginx, frontend would need to call `http://VM_IP:8000/`.  

#### Build React app
```bash
npm run build
```

This generates optimized static files into `/frontend/build/`.  
These will later be copied to `/var/www/mern/build/` for Nginx to serve.

---

### 4. Setup Backend
```bash
cd ../backend
npm install
```

#### Configure Environment
```bash
sudo mv example.env .env
```

Populate `.env`:
```env
# Mongo Atlas connection
MONGO_URI="mongodb+srv://user:pass@cluster0.mongodb.net/mydb?retryWrites=true&w=majority"

# Frontend origin (point to VM IP with port 80 for Nginx)
ORIGIN="http://192.168.1.xx"

# Email (optional: for OTP/password reset features)
EMAIL="xxxxxx@gmail.com@gmail.com"
PASSWORD="xyxyxyxy@2"

# Security & tokens
SECRET_KEY="very_strong_secret_key"
LOGIN_TOKEN_EXPIRATION="30d"
OTP_EXPIRATION_TIME="120000"
PASSWORD_RESET_TOKEN_EXPIRATION="2m"
COOKIE_EXPIRATION_DAYS="30"

# Environment mode
PRODUCTION="true"
```

**Purpose of variables:**

- **`MONGO_URI`** ‚Üí Connection string to MongoDB Atlas.  

- **`ORIGIN`** ‚Üí Mainly used for **CORS (Cross-Origin Resource Sharing)**.  
  - If your backend serves APIs and frontend is on a different domain/port, CORS rules apply.  
  - In this **Nginx reverse-proxy setup**, frontend and backend appear to come from the **same origin** (e.g., `http://192.168.1.xx`), so CORS is effectively bypassed.  
  - ‚ö†Ô∏è If `ORIGIN` is **not defined** in this monolithic deployment ‚Üí the app will still work fine.  
  - In **multi-hosted deployments** (e.g., frontend on Vercel, backend on Render), missing `ORIGIN` would trigger **CORS errors** (blocked API requests).  
  - üëâ With Nginx monolithic deployment ‚Üí `ORIGIN` doesn‚Äôt matter much. With cloud-hosted setups ‚Üí `ORIGIN` is **mandatory**.  

- **`EMAIL` / `PASSWORD`** ‚Üí SMTP credentials used by the backend for sending **OTP (One-Time Passwords)** and **password reset emails**.  
  - Without them ‚Üí features like **Forgot Password** or **Login with OTP** won‚Äôt work.  
  - The rest of the app (browsing products, cart, checkout) is unaffected.  

- **OTP-related variables** (`LOGIN_TOKEN_EXPIRATION`, `OTP_EXPIRATION_TIME`, `PASSWORD_RESET_TOKEN_EXPIRATION`, `COOKIE_EXPIRATION_DAYS`) ‚Üí Control expiration times for login tokens, OTPs, and password resets.  

- **`SECRET_KEY`** ‚Üí Secret key for signing JWT tokens (critical for authentication security).   

---

### 5. Install & Configure Nginx
```bash
sudo apt install nginx -y
sudo systemctl enable nginx
sudo systemctl start nginx
```

#### Remove defaults
```bash
sudo rm /etc/nginx/sites-available/default
sudo rm /etc/nginx/sites-enabled/default
```

#### Create Nginx Config
```bash
sudo vi /etc/nginx/sites-available/mern.conf
```

```nginx
server {
    listen 80;
    server_name 192.168.1.xx;   # Replace with domain later (e.g. shop.myshop.com)

    # Root for React build
    root /home/kastro/mern-ecommerce/frontend/build;
    index index.html;

    # Handle React single-page app routes
    location / {
        try_files $uri /index.html;
    }

    # Backend API proxy
    location /api/ {
        proxy_pass http://127.0.0.1:8000/;   # Node backend running locally
        proxy_http_version 1.1;
        proxy_set_header Upgrade $http_upgrade;
        proxy_set_header Connection 'upgrade';
        proxy_set_header Host $host;
        proxy_cache_bypass $http_upgrade;
    }

    # Logs
    access_log /var/log/nginx/mern_access.log;
    error_log  /var/log/nginx/mern_error.log;
}
```

#### Enable Config
```bash
sudo ln -s /etc/nginx/sites-available/mern.conf /etc/nginx/sites-enabled/
sudo nginx -t
sudo systemctl reload nginx
```

---

### 6. Start Backend API
From backend folder:
```bash
npm start
```

At this point:
- **Node.js backend** connects to **MongoDB Atlas**.  
- **Nginx** serves React build and proxies API requests.  

---

# üõ† Deployment Automation with Shell Scripts

To streamline deployment and avoid manual steps, this project includes **automation scripts** that handle build creation, file deployment, permission enforcement, and Nginx reloads. These scripts follow **DevOps best practices** by ensuring deployments are **repeatable, idempotent, and safe**.

---

## üì¶ build_deploy.sh

Automates the React frontend build and deployment into `/var/www/mern/build`.

```bash
#!/bin/bash
# Purpose: Build React frontend and deploy to /var/www/mern/build with Nginx reload

set -e  # exit on error

FRONTEND_DIR="/home/kastro/mern-ecommerce/frontend"
DEPLOY_DIR="/var/www/mern/build"

echo "Building frontend..."
cd $FRONTEND_DIR
npm run build

echo "Ensuring target directory exists..."
sudo mkdir -p $DEPLOY_DIR

echo "Deploying build to $DEPLOY_DIR ..."
sudo rm -rf $DEPLOY_DIR/*
sudo cp -r $FRONTEND_DIR/build/* $DEPLOY_DIR/

echo "Setting permissions ..."
sudo chown -R www-data:www-data $DEPLOY_DIR
sudo chmod -R 755 $DEPLOY_DIR

echo "Reloading nginx ..."
sudo systemctl reload nginx

echo "Build deployed and nginx reloaded successfully!"
```

### üîπ Highlights
- **Clean deployments**: Old assets removed before copying new ones.  
- **Permissions enforced**: Ensures ownership and access are always correct.  
- **Automatic Nginx reload**: New builds are instantly served.  
- **Error-safe**: Script stops on the first failure (`set -e`).  

---

## üåê nginx_server.sh

Automates the Nginx configuration setup and reload.

```bash
#!/bin/bash
set -e

CONF_NAME="mern.conf"
SRC_CONF="/etc/nginx/sites-available/$CONF_NAME"
DST_CONF="/etc/nginx/sites-enabled/$CONF_NAME"

# Copy project Nginx config to sites-available
sudo cp /home/kastro/mern-ecommerce/nginx/mern.conf "$SRC_CONF"

# Create symlink if missing
if [ ! -L "$DST_CONF" ]; then
    sudo ln -s "$SRC_CONF" "$DST_CONF"
fi

# Validate configuration
sudo nginx -t

# Reload only if syntax is valid
if [ $? -eq 0 ]; then
    sudo systemctl reload nginx
    echo "Nginx reloaded with $CONF_NAME"
else
    echo "Nginx config test failed"
    exit 1
fi
```
---

# Backend Process Management with PM2

For production we use **[PM2](https://pm2.keymetrics.io/)**, a Node.js process manager.  
PM2 keeps the backend (`npm start`) always running, restarts it if it crashes, and makes sure it comes back automatically after server reboots.

## Install PM2
```bash
sudo npm install -g pm2
pm2 --version
```
- Installs PM2 globally so it can manage Node.js apps system-wide.  
- Verify installation with the version command.

## Start the backend with PM2
```bash
cd ~/mern-ecommerce/backend
pm2 start npm --name "mern-backend" -- start
```
- `cd` into the backend folder.  
- Run `npm start` under PM2, giving it the friendly name `mern-backend`.

## Restart the app
```bash
pm2 restart mern-backend
```
- Restarts the backend process after code changes or config updates.

## Enable auto-start on reboot
```bash
pm2 startup systemd
```
- Generates a systemd service for PM2.  
- It prints a command like:
  ```bash
  sudo env PATH=$PATH:/home/kastro/.nvm/versions/node/v21.7.3/bin \
  /home/kastro/.nvm/versions/node/v21.7.3/lib/node_modules/pm2/bin/pm2 \
  startup systemd -u kastro --hp /home/kastro
  ```
- Run that exact command so PM2 is registered with systemd for your user.

## Save current process list
```bash
pm2 save
```
- Saves the current running processes (`mern-backend`) into PM2‚Äôs dump file.  
- This ensures the same processes are restored on boot.

## Verify after reboot
```bash
sudo reboot
```
After the system comes back up:
```bash
pm2 list
```
You should see `mern-backend` already running automatically.  

---

‚úÖ **Conclusion**:  
With this setup:  
- **Frontend** is built and deployed automatically with `build_deploy.sh`.  
- **Nginx** configuration is applied and validated via `nginx_server.sh`.  
- **Backend** is supervised by **PM2**, configured to auto-start after reboots.  

This combination ensures the **MERN monolithic stack** is fully automated, resilient to crashes, and production-ready.  

---

## üéØ Access the Application
Open in browser:
```
http://192.168.1.xx
```

‚úÖ Features verified in deployment:
- Register / Login (JWT + cookies)  
- Product browsing with attributes (size, color, quantity)  
- Cart & Checkout  
- Order & Payment flow  
- Reviews & Wishlist  

---

## üìÇ Deployment Workflow
1. **Frontend build** ‚Üí React code ‚Üí `/var/www/mern/build/`.  
2. **Backend API** ‚Üí Node.js running locally, proxied at `/api/`.  
3. **MongoDB Atlas** ‚Üí External DB connection.  
4. **Nginx** ‚Üí Central proxy & static file server.  
5. **PM2** ‚Üí Process manager ensuring backend uptime and auto-recovery.  
6. **Automation scripts** ‚Üí For repeatable, idempotent deployments.  

---

## üîí Notes & Best Practices
- `.env` files must **not** be committed to GitHub (use `.gitignore`).  
- Use a **deployment script** (`build_deploy.sh`) to automate builds ‚Üí copies frontend build to `/var/www/mern/build/` and fixes permissions.  
- For production ‚Üí run backend with **PM2** or a **systemd service** instead of `npm start`.  
- Logs are written in `/var/log/nginx/mern_*.log` and `~/.pm2/logs/mern-backend-*.log`.  

---

## üöÄ Next Steps (Future Enhancements)
- Dockerize frontend & backend for easier portability.  
- Cloud deployments in AWS and Azure 
- Add CI/CD pipeline with **GitHub Actions** ‚Üí auto-deploy build to VM.  
- Extend monitoring with **Prometheus + Grafana**.  
- Expand deployment to **Kubernetes (EKS/AKS)** with ingress controllers.  

